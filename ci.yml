parameters:
- name: ReleaseVersion
  type: string
  default: ''

trigger:
  branches:
    include:
      - master
      - feature/*
      - release/*
      - hotfix/*

pr:
  branches:
    include:
      - master
      - feature/*
      - release/*
      - hotfix/*

extends:
  template: /eng/templates/1es-redirect.yml
  parameters:
    stages:
      - stage: Build
        variables:
          - name: DefaultOptions
            value: '--batch-mode --fail-at-end -Dmaven.wagon.http.pool=false'
          - name: LoggingOptions
            value: '-Dorg.slf4j.simpleLogger.defaultLogLevel=error -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
          - name: MemoryOptions
            value: '-Xmx3072m'
          - template: /eng/templates/image.yml
        jobs:
          - job: 'Build'
            pool:
              name: $(LINUXPOOL)
              image: $(LINUXVMIMAGE)
              os: linux

            strategy:
              matrix:
                Java 8:
                  ArtifactName: 'java8-packages'
                  ProfileFlag: '-Djava8'
                  JavaVersion: '1.8'
                # We name this 'packages' because it is the default version we want to ship with.
                Java LTS:
                  ArtifactName: 'packages'
                  ProfileFlag: '-Djava-lts'
                  JavaVersion: '1.11'

            steps:
              - task: Maven@4
                displayName: 'Build and Package'
                inputs:
                  mavenPomFile: 'pom.xml'
                  goals: 'deploy'
                  options: '$(DefaultOptions) $(ProfileFlag) -T 1C -DskipTests -Dgpg.skip -Dcheckstyle.skip=true -Dspotbugs.skip=true --settings eng/settings.xml -DaltDeploymentRepository="local::default::file:///${project.basedir}/output"'
                  mavenOptions: '$(LoggingOptions) $(MemoryOptions)'
                  mavenVersionOption: 'Default'
                  javaHomeOption: 'JDKVersion'
                  jdkVersionOption: $(JavaVersion)
                  jdkArchitectureOption: 'x64'
                  publishJUnitResults: false

              - task: Maven@4
                displayName: 'Run SpotBugs, Checkstyle, and Javadoc'
                inputs:
                    mavenPomFile: pom.xml
                    options: '$(DefaultOptions) --no-transfer-progress -DskipTests -Dgpg.skip'
                    mavenOptions: '$(MemoryOptions)'
                    mavenVersionOption: 'Default'
                    javaHomeOption: 'JDKVersion'
                    jdkVersionOption: $(JavaVersion)
                    jdkArchitectureOption: 'x64'
                    publishJUnitResults: false
                    goals: 'verify'

              - script: |
                  cp output/com/microsoft/azure/qpid-proton-j-extensions/**/* $(Build.ArtifactStagingDirectory)
                  rm $(Build.ArtifactStagingDirectory)/*.sha1
                  rm $(Build.ArtifactStagingDirectory)/*.md5
                displayName: Flatten and copy build outputs

              - task: 1ES.PublishPipelineArtifact@1
                displayName: 'Publish outputs to $(ArtifactName) artifact'
                inputs:
                  artifactName: $(ArtifactName)
                  targetPath: $(Build.ArtifactStagingDirectory)

          - job:
            displayName: 'Test'
            strategy:
              matrix:
                Linux - Java 8:
                  OSName: 'Linux'
                  OSVmImage: 'ubuntu-22.04'
                  ProfileFlag: '-Djava8'
                  JavaVersion: '1.8'
                Linux - Java LTS:
                  OSName: 'Linux'
                  OSVmImage: 'ubuntu-22.04'
                  ProfileFlag: '-Djava-lts'
                  JavaVersion: '1.11'

            pool:
              name:  $(LINUXPOOL)
              image: $(LINUXVMIMAGE)
              os: linux

            steps:
              - template: /eng/templates/test-steps.yml

          - job:
            displayName: 'Test'
            strategy:
              matrix:
                Windows - Java 8:
                  OSName: 'Windows'
                  OSVmImage: 'windows-2022'
                  ProfileFlag: '-Djava8'
                  JavaVersion: '1.8'
                Windows - Java LTS:
                  OSName: 'Windows'
                  OSVmImage: 'windows-2022'
                  ProfileFlag: '-Djava-lts'
                  JavaVersion: '1.11'

            pool:
              name:  $(WINDOWSPOOL)
              image: $(WINDOWSVMIMAGE)
              os: windows

            steps:
              - template: /eng/templates/test-steps.yml

          - job:
            displayName: 'Test'
            strategy:
              matrix:
                macOS - Java 8:
                  OSName: 'macOS'
                  OSVmImage: 'macOS-13'
                  ProfileFlag: '-Djava8'
                  JavaVersion: '1.8'
                macOS - Java LTS:
                  OSName: 'macOS'
                  OSVmImage: 'macOS-13'
                  ProfileFlag: '-Djava-lts'
                  JavaVersion: '1.11'

            pool:
              name:  $(MACPOOL)
              vmImage: $(MACVMIMAGE)
              os: macOS

            steps:
              - template: /eng/templates/test-steps.yml

      - stage: Publish
        dependsOn: Build
        condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne('${{ parameters.ReleaseVersion }}', ''))
        variables:
          - name: DefaultOptions
            value: '--batch-mode --fail-at-end -Dmaven.wagon.http.pool=false'
          - name: LoggingOptions
            value: '-Dorg.slf4j.simpleLogger.defaultLogLevel=error -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
          - name: MemoryOptions
            value: '-Xmx3072m'
          - template: /eng/templates/image.yml
        jobs:
          - job: 'Publish'
            pool:
              name:  $(LINUXPOOL)
              image: $(LINUXVMIMAGE)
              os: linux

            steps:
              - task: DownloadPipelineArtifact@2
                displayName: 'Download "packages" artifact'
                inputs:
                  source: 'current'
                  artifactName: 'packages'
                  path: '$(System.ArtifactsDirectory)'
              - pwsh: |
                  $artifactName = "$(System.ArtifactsDirectory)"
                  Write-Output "Contents of artifact: $artifactName"
                  $files = Get-ChildItem -Path $artifactName -Recurse
                  foreach ($file in $files) {
                      Write-Output "$($file.FullName)"
                  }
                displayName: 'Print out artifact contents'
              - task: AzurePowerShell@5
                displayName: 'Upload files to partner drop folder'
                inputs:
                  azureSubscription: 'azuresdkpartnerdrops - Storage Partner Drops'
                  ScriptType: 'InlineScript'
                  azurePowerShellVersion: LatestVersion 
                  pwsh: true
                  Inline: |
                    $folderName = "azsdk/java/qpid-proton-j-extensions/${{ parameters.ReleaseVersion }}"
                    azcopy copy "$(System.ArtifactsDirectory)/*" "https://azuresdkpartnerdrops.blob.core.windows.net/drops/$folderName/" --recursive=true
                    Write-output "Files uploaded. BlobPath: $folderName"
                env: 
                  AZCOPY_AUTO_LOGIN_TYPE: 'PSCRED'